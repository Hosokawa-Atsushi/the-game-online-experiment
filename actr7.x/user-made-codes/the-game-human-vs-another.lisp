(in-package :cl-user)
(use-package :the-game.db)

(defun the-game-number-sims (a b)
  (when (and (numberp a) (numberp b))
    (- (/ (abs (- a b)) (max a b)))))

(add-act-r-command "the-game-number-sims" 'the-game-number-sims
  "Similarity between numbers for the-game task.")



(defvar *experiment-status* nil)
(defvar *trial-number*)
(defvar *trial-start-time*)
(defvar *deck* '(1 2 3 4 5))
(defvar *current-block*)
(defvar *current-round*)
(defvar *a-won-times* 0 "他方のプレイヤーが勝ったブロック数。")
(defvar *h-won-times* 0 "人が勝ったブロック数。")
(defvar *drew-times* 0 "引き分けたブロック数。")
(defvar *model-pathspec*)
(defvar *another-name*)
(defvar *another-choices*)
(defvar *another-hands*)
(defvar *another-action*)
(defvar *another-fixed*)
(defvar *another-start-time*)
(defvar *another-end-time*)
(defvar *indicator-to-human*)
(defvar *card-button-list*)
(defvar *fixing-button*)
(defvar *human-name*)
(defvar *human-choices*)
(defvar *human-hands*)
(defvar *human-action*)
(defvar *human-fixed*)
(defvar *human-start-time*)
(defvar *human-end-time*)
(defvar *key-monitor-installed* nil)

(defun set-players (human another-is-model another-id)
  (setf *human-name* human)
  (if (string= another-is-model "true")
    (cond
      ((string= another-id "model1") (setf *another-name* "AS-IS+COMPLETE+CASE-BASE" *model-pathspec* "actr7.x/the-game-models/AS-IS+COMPLETE+CASE-BASE.lisp"))
      ((string= another-id "model2") (setf *another-name* "AS-IS+COMPLETE+CB-OR-IMI" *model-pathspec* "actr7.x/the-game-models/AS-IS+COMPLETE+CB-OR-IMI.lisp"))
      ((string= another-id "model3") (setf *another-name* "AS-IS+OUTCOME-WEIGHT-LARGE+CASE-BASE" *model-pathspec* "actr7.x/the-game-models/AS-IS+OUTCOME-WEIGHT-LARGE+CASE-BASE.lisp"))
      ((string= another-id "model4") (setf *another-name* "AS-IS+OUTCOME-WEIGHT-LARGE+CB-OR-IMI" *model-pathspec* "actr7.x/the-game-models/AS-IS+OUTCOME-WEIGHT-LARGE+CB-OR-IMI.lisp"))
      ((string= another-id "model5") (setf *another-name* "AS-IS+OUTCOME-WEIGHT-SMALL+CASE-BASE" *model-pathspec* "actr7.x/the-game-models/AS-IS+OUTCOME-WEIGHT-SMALL+CASE-BASE.lisp"))
      ((string= another-id "model6") (setf *another-name* "AS-IS+OUTCOME-WEIGHT-SMALL+CB-OR-IMI" *model-pathspec* "actr7.x/the-game-models/AS-IS+OUTCOME-WEIGHT-SMALL+CB-OR-IMI.lisp"))
      ((string= another-id "model7") (setf *another-name* "CUMULATIVE+COMPLETE+CASE-BASE" *model-pathspec* "actr7.x/the-game-models/CUMULATIVE+COMPLETE+CASE-BASE.lisp"))
      ((string= another-id "model8") (setf *another-name* "CUMULATIVE+COMPLETE+CB-OR-IMI" *model-pathspec* "actr7.x/the-game-models/CUMULATIVE+COMPLETE+CB-OR-IMI.lisp"))
      ((string= another-id "model9") (setf *another-name* "CUMULATIVE+OUTCOME-WEIGHT-LARGE+CASE-BASE" *model-pathspec* "actr7.x/the-game-models/CUMULATIVE+OUTCOME-WEIGHT-LARGE+CASE-BASE.lisp"))
      ((string= another-id "model10") (setf *another-name* "CUMULATIVE+OUTCOME-WEIGHT-LARGE+CB-OR-IMI" *model-pathspec* "actr7.x/the-game-models/CUMULATIVE+OUTCOME-WEIGHT-LARGE+CB-OR-IMI.lisp"))
      ((string= another-id "model11") (setf *another-name* "CUMULATIVE+OUTCOME-WEIGHT-SMALL+CASE-BASE" *model-pathspec* "actr7.x/the-game-models/CUMULATIVE+OUTCOME-WEIGHT-SMALL+CASE-BASE.lisp"))
      ((string= another-id "model12") (setf *another-name* "CUMULATIVE+OUTCOME-WEIGHT-SMALL+CB-OR-IMI" *model-pathspec* "actr7.x/the-game-models/CUMULATIVE+OUTCOME-WEIGHT-SMALL+CB-OR-IMI.lisp"))
      ((string= another-id "random") (setf *another-name* "random" *model-pathspec* "actr7.x/the-game-models/random.lisp")))
    (setf *another-name* another-id *model-pathspec* nil)))
(add-act-r-command "set-players" 'set-players)

(defun redraw ()
  (format t "*experiment-status*: ~s~%" *experiment-status*)
  (case *experiment-status*
    ((nil) (prepare) (setf *experiment-status* :ready) (show-entrance-to-human))
    ((:ready) (show-entrance-to-human))
    ((:playing) (show-human-state))
    ((:time-is-up) (show-exit-to-human))))
(add-act-r-command "redraw" 'redraw)

(defun prepare ()
  (format t "*human-name*: ~s, *another-name*: ~s~%" *human-name* *another-name*)
  (let ((num (get-number *human-name* *another-name*)))
    (setf *trial-number*
      (if num num (insert-trial-and-get-number *another-name* *human-name*))))
  (insert-grade *trial-number* *human-name*)
  (when *model-pathspec* (insert-grade *trial-number* *another-name*))
  (when *model-pathspec* (insert-memory *trial-number* *another-name*))
  (setf *current-block* 0 *a-won-times* 0 *h-won-times* 0 *drew-times* 0)
  (clear-all)
  (when *model-pathspec* (load *model-pathspec*))
  (format t "Current model: ~s~%" (mp-models)))

(defun show-entrance-to-human ()
  (open-exp-window "Human" :width 1000 :height 650 :x 0 :y 0)
  (let ((indicator-vector #("下のボタンを押すと、" "ゲームが始まります。"))
         (warning-vector #("操作できなくなったら" "ブラウザの再読み込み（リロード）")))
    (dotimes (i (length indicator-vector))
      (add-text-to-exp-window "Human" (aref indicator-vector i) :x 200 :y (+ 150 (* 50 i)) :font-size 40))
    (add-button-to-exp-window "Human" :text "対戦開始" :x 420 :y 275 :width 120 :height 60 :color 'lime :action #'play-the-game)
    (dotimes (i (length warning-vector))
      (add-text-to-exp-window "Human" (aref warning-vector i) :x 200 :y (+ 370 (* 50 i)) :font-size 40))))

(defun play-the-game ()
  (setf *experiment-status* :playing)
  (add-key-monitor)
  (setf *trial-start-time* (get-time nil))
  (set-start-time *trial-number*)
  (the-game-new-block))

(defun check-trial-finish ()
  (cond
    ((< (- (get-time nil) *trial-start-time*) (* 30 60000)) (the-game-new-block))
    (t (set-finish-time *trial-number*)
      (setf *experiment-status* :time-is-up)
      (remove-key-monitor)
      (show-exit-to-human))))

(defun show-exit-to-human ()
  (open-exp-window "Human" :width 1000 :height 650 :x 0 :y 0)
  (let ((indicator-vector (vector "これでゲームは終わりです。" "アンケートにお答えください。" "下のボタンを押すと、" "アンケートのページに遷移します。")))
    (dotimes (i (length indicator-vector))
      (add-text-to-exp-window "Human" (aref indicator-vector i) :x 200 :y (+ 150 (* 50 i)) :font-size 40)))
  (add-button-to-exp-window "Human" :text "アンケート" :x 420 :y 380 :width 120 :height 60 :color 'lime :action #'transition-to-questionnaire))

(defun transition-to-questionnaire ()
  (let ((win (determine-exp-window (agi-component) "Human")))
    (send-update-to-handlers win '("questionnaire"))))


(defun respond-to-keypress (model key)
  (cond
    (model
      (setf *another-action* (read-from-string key)))
    (t ;; (setf *human-action* (read-from-string key))
      )))

(defun add-key-monitor ()
  (unless *key-monitor-installed*
    (add-act-r-command "the-game-key-press" 'respond-to-keypress
                       "the-game task key output monitor")
    (monitor-act-r-command "output-key" "the-game-key-press")
    (setf *key-monitor-installed* t)))

(defun remove-key-monitor ()
  (remove-act-r-command-monitor "output-key" "the-game-key-press")
  (remove-act-r-command "the-game-key-press")
  (setf *key-monitor-installed* nil))

(defun the-game-new-block ()
  (incf *current-block*)
  (setf *another-hands* *deck* *human-hands* *deck* *another-choices* nil *human-choices* nil)
  (start-new-round))

(defun start-new-round ()
  (setf *current-round* (1+ (length *human-choices*)))
  (set-human-round)
  (if *model-pathspec*
    (show-model-state *another-hands* *another-choices* *human-choices*)
    (start-monitoring)))

(defun check-round-end ()
  (when (and *another-fixed* *human-fixed*)
    (setf *another-hands* (remove *another-action* *another-hands*) *human-hands* (remove *human-action* *human-hands*)
      *another-choices* (reverse (cons *another-action* (reverse *another-choices*)))
      *human-choices* (reverse (cons *human-action* (reverse *human-choices*))))
    (if (null *human-hands*)
      (the-game-settle-block *another-choices* *human-choices*)
      (start-new-round))))

(defun the-game-settle-block (achoices hchoices)
  (multiple-value-bind (apoint hpoint) (compute-points achoices hchoices 0 0)
    (multiple-value-bind (ares hres) (cond ((> apoint hpoint) (incf *a-won-times*) (values 'win 'lose))
                                            ((< apoint hpoint) (incf *h-won-times*) (values 'lose 'win))
                                            (t (incf *drew-times*) (values 'draw 'draw)))
      (show-model-result achoices hchoices ares)
      (show-human-result achoices hchoices hres)))
  (update-grade *trial-number* *human-name* *h-won-times* *a-won-times* *drew-times*)
  (when *model-pathspec* (update-grade *trial-number* *another-name* *a-won-times* *h-won-times* *drew-times*))
  (when *model-pathspec* (update-memory *trial-number* *another-name* (length (dm))))
  (check-trial-finish))


(defparameter *average-vector* #(nil 5.4695 5.7610 5.6429 5.9004 2.2242))
(defparameter *s-vector* #(nil 5.4394 5.5228 5.5341 5.3204 2.6998))

(defun initialize-another ()
  (makunbound '*another-action*)
  (setf *another-fixed* nil))

(defun show-model-state (mhands mchoices ochoices)
  (initialize-another)
  (if (buffer-read 'goal)
    (mod-focus-fct `(has-1 ,(when (find 1 mhands) t) has-2 ,(when (find 2 mhands) t)
                     has-3 ,(when (find 3 mhands) t) has-4 ,(when (find 4 mhands) t)
                     has-5 ,(when (find 5 mhands) t) m-1st ,(first mchoices)
                     m-2nd ,(second mchoices)        m-3rd ,(third mchoices)
                     m-4th ,(fourth mchoices)        m-5th ,(fifth mchoices)
                     o-1st ,(first ochoices)         o-2nd ,(second ochoices)
                     o-3rd ,(third ochoices)         o-4th ,(fourth ochoices)
                     o-5th ,(fifth ochoices)         state start))
    (goal-focus-fct (car (define-chunks-fct
                           `((isa game-state                  has-1 ,(when (find 1 mhands) t)
                              has-2 ,(when (find 2 mhands) t) has-3 ,(when (find 3 mhands) t)
                              has-4 ,(when (find 4 mhands) t) has-5 ,(when (find 5 mhands) t)
                              m-1st ,(first mchoices)         m-2nd ,(second mchoices)
                              m-3rd ,(third mchoices)         m-4th ,(fourth mchoices)
                              m-5th ,(fifth mchoices)         o-1st ,(first ochoices)
                              o-2nd ,(second ochoices)        o-3rd ,(third ochoices)
                              o-4th ,(fourth ochoices)        o-5th ,(fifth ochoices)
                              state start))))))
  (setf *another-start-time* (get-time nil))
  (let ((win (determine-exp-window (agi-component) "Human"))
             (delay (+ (aref *average-vector* *current-round*)
                       (abs (act-r-noise (aref *s-vector* *current-round*))))))
          (send-update-to-handlers win (list "delay" delay)))
  (run-full-time 10))

(defun fix-model-action ()
  (setf *another-end-time* (get-time nil))
  (setf *another-fixed* t)
  (insert-result *trial-number* *current-block* *current-round* *another-name* *another-action* (- *another-end-time* *another-start-time*))
  (check-round-end))
(add-act-r-command "fix-model-action" 'fix-model-action)

(defun show-model-result (mchoices ochoices mres)
  (if (buffer-read 'goal)
    (mod-focus-fct `(m-1st ,(first mchoices)         m-2nd ,(second mchoices)
                     m-3rd ,(third mchoices)         m-4th ,(fourth mchoices)
                     m-5th ,(fifth mchoices)         o-1st ,(first ochoices)
                     o-2nd ,(second ochoices)        o-3rd ,(third ochoices)
                     o-4th ,(fourth ochoices)        o-5th ,(fifth ochoices)
                     mresult ,mres                   state result))
    (goal-focus-fct (car (define-chunks-fct
                           `((isa game-result                 m-1st ,(first mchoices)
                              m-2nd ,(second mchoices)        m-3rd ,(third mchoices)
                              m-4th ,(fourth mchoices)        m-5th ,(fifth mchoices)
                              o-1st ,(first ochoices)         o-2nd ,(second ochoices)
                              o-3rd ,(third ochoices)         o-4th ,(fourth ochoices)
                              o-5th ,(fifth ochoices)         mresult ,mres
                              state result))))))
  (run-full-time 10))

(defun start-monitoring ()
  (initialize-another)
  (let ((win (determine-exp-window (agi-component) "Human")))
    (send-update-to-handlers win '("monitoring" "start"))))

(defun refer-to-another-action ()
  (let ((n (retrieve-another-action *trial-number* *current-block* *current-round* *another-name*)))
    (when n (setf *another-action* n *another-fixed* t)
    (let ((win (determine-exp-window (agi-component) "Human")))
      (send-update-to-handlers win '("monitoring" "stop")))
    (check-round-end))))
(add-act-r-command "refer-to-another-action" 'refer-to-another-action)

(defun set-human-action (choice text-id)
  (setf *human-action* choice)
  (modify-text-for-exp-window text-id :text (write-to-string choice))
  (add-items-to-exp-window "Human" text-id)
  (unless (boundp '*fixing-button*)
    (setf *fixing-button*
      (add-button-to-exp-window "Human" :text "確定" :x 580 :y 180 :width 120 :height 60 :color 'yellow))
    (modify-button-for-exp-window *fixing-button* :action
      (lambda ()
        (setf *human-end-time* (get-time nil))
        (setf *human-fixed* t)
        (insert-result *trial-number* *current-block* *current-round* *human-name* *human-action* (- *human-end-time* *human-start-time*))
        (dolist (button *card-button-list*)
          (remove-items-from-exp-window "Human" button))
        (setf *card-button-list* nil)
        (remove-items-from-exp-window "Human" *fixing-button*)
        (modify-text-for-exp-window *indicator-to-human* :text "相手が決めるまでお待ちください…")
        (check-round-end)))))

(defun show-situation-to-human (player-name y-pos choices)
  (add-text-to-exp-window "Human" player-name :x 120 :y y-pos :font-size 30)
  (let ((x-pos 250))
    (dolist (num choices)
      (add-text-to-exp-window "Human" (write-to-string num) :x x-pos :y y-pos :font-size 30)
      (incf x-pos 50))))

(defun show-record-to-human (property y-pos rec-num)
  (add-text-to-exp-window "Human" property :x 625 :y y-pos :font-size 30)
  (add-text-to-exp-window "Human" rec-num :x 825 :y y-pos :font-size 30))

(defun count-down ()
  (let ((remaining (add-text-to-exp-window "Human" "" :x 580 :y 150 :font-size 40)))
    (dotimes (i 600)
      (modify-text-for-exp-window remaining :text (format nil "あと~a秒" (- 600 i)))
      (sleep 1))))

(defun model-talk ()
  (let ((remark (add-text-to-exp-window "Human" "考え中…" :x 100 :y 200 :font-size 40)))
    (loop
      (loop until *another-fixed*) (modify-text-for-exp-window remark :text "決めました。")
      (loop while *another-fixed*) (modify-text-for-exp-window remark :text "考え中…"))))

(defun show-human-state ()
  "実験参加者に見せるゲーム画面を描画する。"
  (makunbound '*fixing-button*)
  (clear-exp-window "Human")
  (add-items-to-exp-window "Human" *indicator-to-human*)
  ;; (add-text-to-exp-window "Human" "相手：" :x 100 :y 150 :font-size 40)
  ;; (add-text-to-exp-window "Human" "自分" :x 100 :y 300 :font-size 60)
  (dolist (button *card-button-list*)
    (add-items-to-exp-window "Human" button))
  (add-text-to-exp-window "Human" "現在の状況" :x 100 :y 380 :font-size 30)
  (let ((row-height 50))
    (show-situation-to-human "" (- 480 row-height) '(Ⅰ Ⅱ Ⅲ Ⅳ Ⅴ))
    (show-situation-to-human "相手" 480 *another-choices*)
    (show-situation-to-human "自分" (+ 480 row-height) *human-choices*)
    (dotimes (i 4)
      (let ((line-y (+ 410 (* row-height i))))
        (add-line-to-exp-window "Human" (list 100 line-y) (list 500 line-y))
        (unless (= i 0)
          (add-line-to-exp-window "Human" (list 210 (- line-y row-height)) (list 210 line-y))))))
  (add-text-to-exp-window "Human" "今までの対戦成績" :x 600 :y 380 :font-size 30)
  (show-record-to-human "自分の勝ち…" 430 (write-to-string *h-won-times*))
  (show-record-to-human "自分の負け…" 480 (write-to-string *a-won-times*))
  (show-record-to-human "引き分け……" 530 (write-to-string *drew-times*)))

(defun set-human-round ()
  (makunbound '*human-action*)
  (setf *human-fixed* nil)
  (open-exp-window "Human" :width 1000 :height 650 :x 0 :y 0)
  (setf *indicator-to-human* (create-text-for-exp-window "Human" "出すカードをクリックしてください。" :x 100 :y 100 :font-size 40))
  (let ((text-id (create-text-for-exp-window "Human" "" :x 450 :y 200 :font-size 50)))
    (setf *card-button-list*
      (mapcar
        (lambda (num)
          (create-button-for-exp-window "Human" :text (write-to-string num) :x (+ 220 (* 80 num)) :y 285 :width 48 :height 60 :color 'orange :action (lambda () (set-human-action num text-id))))
        *human-hands*)))
  (show-human-state)
  (setf *human-start-time* (get-time nil)))

(defun show-human-result (achoices hchoices hres)
  )

(defun compute-points (achoices hchoices apoint hpoint)
  (if (null achoices) (values apoint hpoint)
    (compute-points (cdr achoices) (cdr hchoices)
                    (if (> (car achoices) (car hchoices)) (1+ apoint) apoint)
                    (if (< (car achoices) (car hchoices)) (1+ hpoint) hpoint))))
